import React, { useState } from "react";
import {
  Navbar,
  Container,
  Button,
  Form,
  Card,
  ProgressBar,
  Row,
  Col,
} from "react-bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
import { FiArrowLeft } from "react-icons/fi";
import * as Routers from "../../../utils/Routes";
import { useNavigate } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "@redux/store";
import HotelActions from "@redux/hotel/actions";
import { showToast, ToastProvider } from "@components/ToastContainer";

function BookingPropertyName() {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const createHotel = useAppSelector((state) => state.Hotel.createHotel);
  const [hotelName, setHotelName] = useState(createHotel.hotelName);
  const [phoneNumber, setPhoneNumber] = useState(createHotel.phoneNumber || "");
  const [email, setEmail] = useState(createHotel.email || "");

  const validatePhoneNumber = (phone) => {
    const phoneRegex = /^[0-9]{10}$/;
    return phoneRegex.test(phone);
  };

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  // Replace the existing handleContinueClick function
  const handleContinueClick = () => {
    if (hotelName === "" || phoneNumber === "" || email === "") {
      showToast.warning("H√£y ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi ti·∫øp t·ª•c!");
      return;
    }

    if (!validatePhoneNumber(phoneNumber)) {
      showToast.warning("S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë!");
      return;
    }

    if (!validateEmail(email)) {
      showToast.warning("Email kh√¥ng h·ª£p l·ªá! H√£y nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email.");
      return;
    }

    dispatch({
      type: HotelActions.SAVE_HOTEL_NAME_CREATE,
      payload: { hotelName, phoneNumber, email },
    });
    navigate(Routers.BookingPropertyLocation);
  };
  return (
    <div className="booking-app">
      <ToastProvider />
      {/* Navigation Bar */}
      <Navbar className="navbar-custom">
        <Container>
          <Navbar.Brand href="#home" className="text-white fw-bold">
            <b style={{ fontSize: 30 }}>
              UR<span style={{ color: "#f8e71c" }}>OO</span>M
            </b>
          </Navbar.Brand>
        </Container>
      </Navbar>

      {/* Progress Bar */}
      <Container className="mt-4">
        <div className="progress-section">
          <div className="progress-label mb-2">
            <h5>Th√¥ng tin c∆° b·∫£n</h5>
          </div>
          <ProgressBar style={{ height: "20px" }}>
            <ProgressBar variant="primary" now={20} key={1} />
            <ProgressBar variant="secondary" now={20} key={2} />
            <ProgressBar variant="secondary" now={20} key={3} />
            <ProgressBar variant="secondary" now={20} key={4} />
            <ProgressBar variant="secondary" now={20} key={5} />
          </ProgressBar>
        </div>
      </Container>

      {/* Main Content */}
      <Container className="main-content py-4">
        <Row>
          <Col md={7}>
            <div className="mb-4">
              <h1 className="main-heading">T√™n ch·ªó ngh·ªâ Qu√Ω v·ªã?</h1>
            </div>

            <div className="property-form-card">
              <Form>
                <Form.Group className="mb-3">
                  <Form.Label className="fw-bold">T√™n ch·ªó ngh·ªâ</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Nh·∫≠p t√™n ch·ªó ngh·ªâ"
                    className="form-input"
                    value={hotelName}
                    onChange={(e) => setHotelName(e.target.value)}
                  />
                </Form.Group>
                <Form.Group className="mb-3">
                  <Form.Label className="fw-bold">
                    S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá
                  </Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
                    className="form-input"
                    value={phoneNumber}
                    onChange={(e) => setPhoneNumber(e.target.value)}
                  />
                </Form.Group>
                <Form.Group className="mb-3">
                  <Form.Label className="fw-bold">Email li√™n h·ªá</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Nh·∫≠p email li√™n h·ªá"
                    className="form-input"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </Form.Group>
              </Form>
            </div>

            <div className="navigation-buttons mt-4">
              <Button
                variant="outline-primary"
                onClick={() => {
                  dispatch({
                    type: HotelActions.SAVE_HOTEL_NAME_CREATE,
                    payload: hotelName,
                  });
                  navigate(Routers.BookingRegistration);
                }}
              >
                <FiArrowLeft className="back-icon" />
              </Button>
              <Button
                variant="primary"
                className="continue-button"
                onClick={handleContinueClick}
              >
                Ti·∫øp t·ª•c
              </Button>
            </div>
          </Col>

          <Col md={5}>
            <div className="info-cards">
              {/* First Info Card */}
              <Card className="info-card mb-4">
                <Card.Body>
                  <div className="d-flex justify-content-between align-items-start">
                    <div className="info-icon thumbs-up">
                      <span role="img" aria-label="thumbs up">
                        üëç
                      </span>
                    </div>
                    <div className="info-content">
                      <h5 className="info-title">
                        T√¥i n√™n ch√∫ √Ω ƒëi·ªÅu g√¨ khi ch·ªçn t√™n?
                      </h5>
                    </div>
                  </div>
                  <ul className="info-list mt-3">
                    <li>Ch·ªçn t√™n ng·∫Øn v√† h·∫•p d·∫´n</li>
                    <li>Tr√°nh s·ª≠ d·ª•ng ch·ªØ vi·∫øt t·∫Øt</li>
                    <li>ƒê√∫ng v·ªõi th·ª±c t·∫ø</li>
                  </ul>
                </Card.Body>
              </Card>

              {/* Second Info Card */}
              <Card className="info-card">
                <Card.Body>
                  <div className="d-flex justify-content-between align-items-start">
                    <div className="info-icon lightbulb">
                      <span role="img" aria-label="lightbulb">
                        üí°
                      </span>
                    </div>
                    <div className="info-content">
                      <h5 className="info-title">
                        T·∫°i sao t√¥i c·∫ßn ƒë·∫∑t t√™n cho ch·ªó ngh·ªâ c·ªßa m√¨nh?
                      </h5>
                    </div>
                  </div>
                  <p className="info-text mt-3">
                    T√™n n√†y gi·ªëng nh∆∞ ti√™u ƒë·ªÅ ƒëƒÉng k√Ω ch·ªó ngh·ªâ c·ªßa Qu√Ω v·ªã tr√™n
                    trang web c·ªßa ch√∫ng t√¥i. T√™n n√†y s·∫Ω cho kh√°ch bi·∫øt th√¥ng tin
                    c·ª• th·ªÉ v·ªÅ ch·ªó ngh·ªâ, v·ªã tr√≠ ho·∫∑c nh·ªØng g√¨ Qu√Ω v·ªã cung
                    c·∫•p.ƒêi·ªÅu n√†y s·∫Ω hi·ªÉn th·ªã cho b·∫•t c·ª© ai truy c·∫≠p trang web
                    c·ªßa ch√∫ng t√¥i, v√¨ v·∫≠y ƒë·ª´ng bao g·ªìm ƒë·ªãa ch·ªâ c·ªßa Qu√Ω v·ªã trong
                    t√™n.
                  </p>
                </Card.Body>
              </Card>
            </div>
          </Col>
        </Row>
      </Container>

      <style jsx="true">{`
        /* Custom CSS */
        .booking-app {
          min-height: 100vh;
        }

        /* Navbar styles */
        .navbar-custom {
          background-color: #003580;
          padding: 10px 0;
        }

        .help-icon {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 24px;
          height: 24px;
          background-color: #fff;
          color: #003580;
          border-radius: 50%;
          font-weight: bold;
        }

        .user-icon-circle {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 32px;
          height: 32px;
          background-color: #fff;
          border-radius: 50%;
          margin-left: 10px;
        }

        /* Progress bar styles */
        .progress-section {
          margin: 0 auto;
        }

        .progress-label {
          font-size: 14px;
          color: #333;
        }

        .progress {
          height: 8px;
          background-color: #e7e7e7;
        }

        .progress-bar-primary {
          background-color: #0071c2;
        }

        .progress-bar-secondary {
          background-color: #e7e7e7;
        }

        /* Main content styles */
        .main-content {
          max-width: 1200px;
          margin: 0 auto;
        }

        .main-heading {
          font-size: 28px;
          font-weight: bold;
          color: #333;
          margin-bottom: 20px;
        }

        /* Property form styles */
        .property-form-card {
          background-color: #fff;
          border-radius: 4px;
          padding: 20px;
          box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
        }

        .form-input {
          height: 45px;
          border: 1px solid #ced4da;
          border-radius: 4px;
          font-size: 16px;
        }

        /* Navigation buttons */
        .navigation-buttons {
          display: flex;
          justify-content: space-between;
        }

        .back-button {
          width: 45px;
          height: 45px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-color: #0071c2;
          color: #0071c2;
        }

        .continue-button {
          flex-grow: 1;
          margin-left: 10px;
          height: 45px;
          background-color: #0071c2;
          border: none;
          font-weight: bold;
        }

        .continue-button:hover {
          background-color: #005999;
        }

        /* Info cards styles */
        .info-card {
          background-color: #fff;
          border-radius: 4px;
          box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
          border: none;
        }

        .info-icon {
          width: 40px;
          height: 40px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 50%;
          font-size: 20px;
        }

        .thumbs-up {
          background-color: #f5f5f5;
          color: #0071c2;
        }

        .lightbulb {
          background-color: #f5f5f5;
          color: #0071c2;
        }

        .info-content {
          flex-grow: 1;
          padding: 0 15px;
        }

        .info-title {
          font-size: 16px;
          font-weight: bold;
          margin-bottom: 0;
        }

        .close-button {
          color: #666;
          padding: 0;
        }

        .info-list {
          padding-left: 20px;
          margin-bottom: 0;
        }

        .info-list li {
          margin-bottom: 5px;
        }

        .info-text {
          font-size: 14px;
          color: #333;
          margin-bottom: 0;
          line-height: 1.5;
        }
      `}</style>
    </div>
  );
}

export default BookingPropertyName;
