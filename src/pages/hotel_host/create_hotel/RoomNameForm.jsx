import React, { useState, useEffect } from "react";
import {
  Container,
  Row,
  Col,
  Form,
  Button,
  Card,
  Navbar,
  ProgressBar,
} from "react-bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
import { useNavigate } from "react-router-dom";
import RoomActions from "@redux/room/actions";
import { useDispatch } from "react-redux";
import { useAppSelector } from "@redux/store";

function RoomNamingForm() {
  const [roomName, setRoomName] = useState("");
  const [customName, setCustomName] = useState("");
  const [useCustomName, setUseCustomName] = useState(false);
  const [errors, setErrors] = useState({});
  const navigate = useNavigate();
    const createRoom = useAppSelector(state => state.Room.createRoom);
  useEffect(() => {
      // If createRoom data exists, populate formData with it
      if (createRoom.name !== "") {
        setUseCustomName(true)
        setCustomName(createRoom.name);
      }
    }, [createRoom]);

  // Room name options
  const roomNameOptions = [
    "Ph√≤ng Standard",
    "Ph√≤ng Family",
    "Ph√≤ng Deluxe",
    "Ph√≤ng Suite",
    "Ph√≤ng Superior",
    "Ph√≤ng Executive",
    "Ph√≤ng Premium",
    "Ph√≤ng Luxury",
  ];

  const validateForm = () => {
    const newErrors = {};

    if (useCustomName) {
      if (!customName.trim()) {
        newErrors.customName = "T√™n ph√≤ng t√πy ch·ªânh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
      } else if (customName.trim().length < 3) {
        newErrors.customName = "T√™n ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±";
      } else if (customName.trim().length > 50) {
        newErrors.customName = "T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±";
      }
    } else {
      if (!roomName) {
        newErrors.roomName = "Vui l√≤ng ch·ªçn t√™n ph√≤ng";
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const dispatch = useDispatch();
  const handleContinue = () => {
    if (validateForm()) {
      dispatch({
        type: RoomActions.SAVE_ROOM_NAME_CREATE,
        payload: {
          name: useCustomName ? customName : roomName,
        },
      });

      // Navigate to next step
      navigate("/RoomNamingForm");
    }
    if (validateForm()) {
      navigate("/RoomImageForm");
    }
  };

  const styles = {
    bookingApp: {
      minHeight: "100vh",
      backgroundColor: "#f8f9fa",
    },
    container: {
      maxWidth: "1000px",
      margin: "50px auto",
      padding: "20px",
    },
    title: {
      fontSize: "28px",
      fontWeight: "bold",
      marginBottom: "30px",
    },
    formSection: {
      marginBottom: "20px",
    },
    infoCard: {
      border: "1px solid #e7e7e7",
      borderRadius: "4px",
      padding: "20px",
      backgroundColor: "#fff",
    },
    infoHeader: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      marginBottom: "15px",
    },
    infoTitle: {
      display: "flex",
      alignItems: "center",
      fontWeight: "bold",
      fontSize: "16px",
    },
    lightBulbIcon: {
      marginRight: "10px",
      color: "#febb02",
    },
    closeButton: {
      background: "none",
      border: "none",
      fontSize: "20px",
      cursor: "pointer",
    },
    bulletPoint: {
      marginBottom: "10px",
    },
    highlightText: {
      color: "#0071c2",
      cursor: "pointer",
    },
    buttonContainer: {
      display: "flex",
      marginTop: "30px",
    },
    backButton: {
      width: "50px",
      marginRight: "10px",
      backgroundColor: "white",
      color: "#0071c2",
      border: "1px solid #0071c2",
    },
    continueButton: {
      flex: 1,
      backgroundColor: "#0071c2",
      border: "none",
    },
    navbarCustom: {
      backgroundColor: "#003580",
      padding: "10px 0",
    },
    customNameSection: {
      marginTop: "15px",
      padding: "15px",
      backgroundColor: "#f8f9fa",
      borderRadius: "5px",
      border: "1px solid #dee2e6",
    },
  };

  return (
    <div style={styles.bookingApp}>
      {/* Navigation Bar */}
      <Navbar style={styles.navbarCustom}>
        <Container>
          <Navbar.Brand href="#home" className="text-white fw-bold">
            <b style={{ fontSize: 30 }}>
              UR<span style={{ color: "#f8e71c" }}>OO</span>M
            </b>
          </Navbar.Brand>
        </Container>
      </Navbar>

      {/* Progress Bar */}
      <Container className="mt-4 mb-4">
        <div className="progress-section">
          <div className="progress-label mb-2">
            <h5>Th√¥ng tin c∆° b·∫£n</h5>
          </div>
          <ProgressBar style={{ height: "20px" }}>
            <ProgressBar variant="primary" now={25} key={1} />
            <ProgressBar variant="primary" now={25} key={2} />
            <ProgressBar variant="secondary" now={25} key={3} />
            <ProgressBar variant="secondary" now={25} key={4} />
          </ProgressBar>
        </div>
      </Container>

      <Container style={styles.container}>
        <h1 style={styles.title}>T√™n c·ªßa ph√≤ng n√†y l√† g√¨?</h1>

        <Row>
          <Col md={7}>
            <div style={styles.infoCard}>
              <p>
                ƒê√¢y l√† t√™n m√† kh√°ch s·∫Ω th·∫•y tr√™n trang ch·ªó ngh·ªâ c·ªßa Qu√Ω v·ªã. H√£y
                ch·ªçn t√™n mi√™u t·∫£ ph√≤ng n√†y ch√≠nh x√°c nh·∫•t.
              </p>

              <Form.Group className="mb-3" style={styles.formSection}>
                <Form.Label>T√™n ph√≤ng *</Form.Label>

                {/* Standard room names */}
                <Form.Select
                  value={roomName}
                  onChange={(e) => {
                    setRoomName(e.target.value);
                    setUseCustomName(false);
                    if (errors.roomName) {
                      setErrors((prev) => ({ ...prev, roomName: "" }));
                    }
                  }}
                  isInvalid={!!errors.roomName}
                  disabled={useCustomName}
                >
                  <option value="">Ch·ªçn t√™n ph√≤ng</option>
                  {roomNameOptions.map((name) => (
                    <option key={name} value={name}>
                      {name}
                    </option>
                  ))}
                </Form.Select>
                <Form.Control.Feedback type="invalid">
                  {errors.roomName}
                </Form.Control.Feedback>
              </Form.Group>

              {/* Custom name option */}
              <Form.Group className="mb-3">
                <Form.Check
                  type="checkbox"
                  id="useCustomName"
                  label="S·ª≠ d·ª•ng t√™n ph√≤ng t√πy ch·ªânh"
                  checked={useCustomName}
                  onChange={(e) => {
                    setUseCustomName(e.target.checked);
                    if (!e.target.checked) {
                      setCustomName("");
                      if (errors.customName) {
                        setErrors((prev) => ({ ...prev, customName: "" }));
                      }
                    }
                  }}
                />
              </Form.Group>

              {/* Custom name input */}
              {useCustomName && (
                <div style={styles.customNameSection}>
                  <Form.Group className="mb-3">
                    <Form.Label>T√™n ph√≤ng t√πy ch·ªânh *</Form.Label>
                    <Form.Control
                      type="text"
                      placeholder="Nh·∫≠p t√™n ph√≤ng t√πy ch·ªânh"
                      value={customName}
                      onChange={(e) => {
                        setCustomName(e.target.value);
                        if (errors.customName) {
                          setErrors((prev) => ({ ...prev, customName: "" }));
                        }
                      }}
                      isInvalid={!!errors.customName}
                      maxLength={50}
                    />
                    <Form.Control.Feedback type="invalid">
                      {errors.customName}
                    </Form.Control.Feedback>
                    <Form.Text className="text-muted">
                      {customName.length}/50 k√Ω t·ª±
                    </Form.Text>
                  </Form.Group>
                  <small className="text-info">
                    üí° T√™n t√πy ch·ªânh s·∫Ω hi·ªÉn th·ªã tr√™n trang web c·ªßa b·∫°n
                  </small>
                </div>
              )}

              {/* Preview */}
              <div
                className="mt-3 p-3"
                style={{ backgroundColor: "#e8f4f8", borderRadius: "5px" }}
              >
                <small className="text-muted">
                  <strong>T√™n ph√≤ng s·∫Ω hi·ªÉn th·ªã:</strong>
                </small>
                <div
                  style={{
                    fontSize: "16px",
                    fontWeight: "bold",
                    color: "#0071c2",
                  }}
                >
                  {useCustomName
                    ? customName || "Ch∆∞a nh·∫≠p t√™n"
                    : roomName || "Ch∆∞a ch·ªçn t√™n"}
                </div>
              </div>
            </div>
          </Col>

          <Col md={5}>
            <div style={styles.infoCard}>
              <div style={styles.infoHeader}>
                <div style={styles.infoTitle}>
                  <span style={styles.lightBulbIcon}>üí°</span>
                  T√™n ph√≤ng ti√™u chu·∫©n vs t√πy ch·ªânh
                </div>
              </div>

              <div className="mb-3">
                <strong>T√™n ph√≤ng ti√™u chu·∫©n:</strong>
                <ul style={{ paddingLeft: "20px", marginTop: "10px" }}>
                  <li style={styles.bulletPoint}>
                    Cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin h∆°n
                  </li>
                  <li style={styles.bulletPoint}>
                    Theo h·ªá th·ªëng th·ªëng nh·∫•t tr√™n trang web
                  </li>
                  <li style={styles.bulletPoint}>D·ªÖ hi·ªÉu cho kh√°ch qu·ªëc t·∫ø</li>
                  <li style={styles.bulletPoint}>
                    ƒê∆∞·ª£c phi√™n d·ªãch sang nhi·ªÅu ng√¥n ng·ªØ
                  </li>
                </ul>
              </div>

              <div>
                <strong>T√™n ph√≤ng t√πy ch·ªânh:</strong>
                <ul style={{ paddingLeft: "20px", marginTop: "10px" }}>
                  <li style={styles.bulletPoint}>
                    Th·ªÉ hi·ªán c√° t√≠nh ri√™ng c·ªßa kh√°ch s·∫°n
                  </li>
                  <li style={styles.bulletPoint}>
                    T·∫°o ·∫•n t∆∞·ª£ng ƒë·∫∑c bi·ªát v·ªõi kh√°ch
                  </li>
                  <li style={styles.bulletPoint}>
                    Linh ho·∫°t trong c√°ch ƒë·∫∑t t√™n
                  </li>
                  <li style={styles.bulletPoint}>
                    Ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu c·ªßa b·∫°n
                  </li>
                </ul>
              </div>
            </div>
          </Col>
        </Row>

        <div style={styles.buttonContainer}>
          <Button
            style={styles.backButton}
            onClick={() => {
              navigate("/CreateRoom");
            }}
          >
            ‚Üê
          </Button>
          <Button style={styles.continueButton} onClick={handleContinue}>
            Ti·∫øp t·ª•c
          </Button>
        </div>
      </Container>
    </div>
  );
}

export default RoomNamingForm;
